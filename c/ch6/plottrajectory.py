#!/usr/bin/env python

help =\
'''
Plot trajectory generated by running a PETSc TS program.  Read from -ts_monitor
and -ts_monitor_solution binary output.

Example:
  $ ./ode -ts_monitor binary:t.dat -ts_monitor_solution binary:y.dat
  $ ./plottrajectory t.dat y.dat

Longer example:
  $ ./ode -ts_final_time 50.0 -ts_dt 0.1 -ts_rtol 1.0e-6 -ts_atol 1.0e-6 \\
    -ts_monitor binary:t.dat -ts_monitor_solution binary:y.dat
 $ ./plottrajectory t.dat y.dat
'''

import sys
import argparse
from argparse import RawTextHelpFormatter
import struct
import numpy as np
import matplotlib.pyplot as plt

try:
    import PetscBinaryIO
except:
    print 'no module PetscBinaryIO found'
    print '    ... need link to petsc/bin/PetscBinaryIO.py?'
    sys.exit(9)

parser = argparse.ArgumentParser(description=help,
                                 formatter_class=RawTextHelpFormatter)
parser.add_argument('tfile',metavar='TDATA',
                    help='file from -ts_monitor binary:TDATA')
parser.add_argument('yfile',metavar='YDATA',
                    help='file from -ts_monitor_solution binary:YDATA')
args = parser.parse_args()

try:
    tfile = open(args.tfile,'r')
except:
    print 'cannot open %s for reading ... stopping' % args.tfile
t = []
while True:
    try:
        bytes = tfile.read(8)
    except:
        print "tfile.read() failed"
        sys.exit(1)
    if len(bytes) > 0:
        t.append(struct.unpack('>d',bytes)[0])
    else:
        break
tfile.close()

io = PetscBinaryIO.PetscBinaryIO()
objects = io.readBinaryFile(args.yfile)
if len(t) != len(objects):
    print 'time dimension size mismatch: %d != %d' % (len(t),len(objects))
    sys.exit(2)
#N = len(objects)
#d = len(objects[0])

Y = np.array(objects).transpose()
for k in range(np.shape(Y)[0]):
    plt.plot(t,Y[k],label='y[%d]' % k)
plt.xlabel('t')
plt.legend()
plt.show()

