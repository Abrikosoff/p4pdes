#!/usr/bin/env python

help =\
'''
Plot trajectory generated by running a PETSc TS program.  Reads output from
   -ts_monitor binary:TFILE -ts_monitor_solution binary:YFILE
Requires access to bin/PetscBinaryIO.py and bin/petsc_conf.py, e.g. sym-links.

Example:
  $ ./ode -ts_monitor binary:t.dat -ts_monitor_solution binary:y.dat
  $ ./plottrajectory t.dat y.dat

Longer example:
  $ ./ode -ts_final_time 20.0 -ts_dt 0.1 -ts_rtol 1.0e-6 -ts_atol 1.0e-6 \\
    -ts_monitor binary:t.dat -ts_monitor_solution binary:y.dat
 $ ./plottrajectory t.dat y.dat
'''

import PetscBinaryIO
import sys
import argparse
from argparse import RawTextHelpFormatter
import numpy as np

parser = argparse.ArgumentParser(description=help,
                                 formatter_class=RawTextHelpFormatter)
parser.add_argument('tfile',metavar='TDATA',
                    help='file from -ts_monitor binary:TDATA')
parser.add_argument('yfile',metavar='YDATA',
                    help='file from -ts_monitor_solution binary:YDATA')
parser.add_argument('--no-plot', dest='plot', action='store_false',
                    help='do not plot; just save variables t,Y')
args = parser.parse_args()

tfile = open(args.tfile,'r')
t = np.fromfile(tfile, dtype='>d')
tfile.close()

io = PetscBinaryIO.PetscBinaryIO()
Y = np.array(io.readBinaryFile(args.yfile)).transpose()
if len(t) != np.shape(Y)[1]:
    print 'time dimension size mismatch: %d != %d' % (len(t),len(objects))
    sys.exit(2)
#N = len(objects)
#d = len(objects[0])

if args.plot:
    import matplotlib.pyplot as plt
    for k in range(np.shape(Y)[0]):
        plt.plot(t,Y[k],label='y[%d]' % k)
    plt.xlabel('t')
    plt.legend()
    plt.show()
else:
    print 'time t is length=%d, solution Y is shape=(%d,%d)' % \
        (len(t),np.shape(Y)[0],np.shape(Y)[1])

