#!/bin/bash

# do tests of unfem:
#    case 0:  trapezoidal unstructured mesh, linear problem
#    case 1:  trapezoidal unstructured mesh, nonlinear problem
#    case 2:  trapezoidal unstructured mesh, linear problem, non-homo Neumann
#    case 3:  square structured mesh, linear problem; compare Chapter 3

# requires: triangle

# run as 5 levels of refinement, quaddeg 2, solution case 1
#   ./test_unfem.sh 5 2 1
# or
#   ./test_unfem.sh          (same as ./test_unfem.sh 4 1 0)

# finest:
#   ./test_unfem.sh 10 1 0 "-pc_type gamg"

OPTIONS="-un_quaddeg ${2:-1} -un_case ${3:-0} $4"
# NOTE:   ${2:-1}  expands to $2 if set, otherwise as 1

# generate .poly,.node,.ele files, in meshes/, at each level of refinement
if [ ${3:-0} -eq 3 ]; then  # generate structured  square.?.*
    # NOTE:   square.10.* is finest level tested
    NAME=square
    ./genstructured.py meshes/$NAME.1 3
    MM=2
    for (( N=1; N<${1:-4}; N++ )); do
        MM=$((2*MM))
        ./genstructured.py meshes/$NAME.$((N+1)) $((MM+1))
    done
    # generate .vec, .is files
    for (( N=1; N<=${1:-4}; N++ )); do
        ./tri2petsc.py meshes/$NAME.$N meshes/$NAME.$N
    done
else  # generate  trap.?.* from trap.poly
    # NOTE:   trap.10.*, generated by area[9] in gentraps.sh, is finest level tested
    if [ ${3:-0} -eq 2 ]; then
        NAME=trapneu
    else
        NAME=trap
    fi
    LEV=${1:-4}
    ./gentraps.sh $NAME $LEV
fi

make unfem

# run unfem and show error, evals, time results
for (( N=1; N<=${1:-4}; N++ )); do
    cmd="./unfem -un_mesh meshes/${NAME}.${N} ${OPTIONS}"
    echo "running:  $cmd"
    rm -f foo.txt
    $cmd -log_view &> foo.txt
    'grep' "result for N" foo.txt
    'grep' SNESFunctionEval foo.txt | awk '{print $1,$2}'
    'grep' SNESJacobianEval foo.txt | awk '{print $1,$2}'
    'grep' "Time (sec):" foo.txt | awk '{print $1,$2,$3}'
done
rm -f foo.txt

