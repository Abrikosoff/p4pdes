#!/bin/bash

# do tests of unfem:
#    case 0:  trapezoidal unstructured mesh, linear problem
#    case 1:  trapezoidal unstructured mesh, nonlinear problem
#    case 2:  trapezoidal unstructured mesh, linear problem, non-homo Neumann
#    case 3:  square structured mesh, linear problem; compare Chapter 3

# requires: triangle

# run as 5 levels of refinement, quaddeg 2, solution case 1
#   ./test_unfem.sh 5 2 1
# or
#   ./test_unfem.sh          (same as ./test_unfem.sh 4 1 0)

OPTIONS="-un_quaddeg ${2:-1} -un_case ${3:-0} -ksp_type cg -pc_type icc $4"
# NOTE:   ${2:-1}  expands to $2 if set, otherwise as 1

# generate .poly,.node,.ele files, in meshes/, at each level of refinement
if [ ${3:-0} -eq 3 ]; then  # generate structured  square.?.*
    # NOTE:   square.10.* is finest level tested
    NAME=square
    cd meshes/
    ./genstructured.py $NAME.1 3
    MM=2
    for (( N=1; N<${1:-4}; N++ )); do
        MM=$((2*MM))
        ./genstructured.py $NAME.$((N+1)) $((MM+1))
    done
    cd ..
else  # generate  trap.?.* from trap.poly
    # NOTE:   trap.FIXME.*, generated by area[?] below, is finest level tested
    if [ ${3:-0} -eq 2 ]; then
        NAME=trapneu
    else
        NAME=trap
    fi
    area[0]=0.5
    area[1]=0.1
    area[2]=0.02
    area[3]=0.005
    area[4]=0.001
    area[5]=0.0002
    area[6]=0.00005
    area[7]=0.00001
    area[8]=0.000002
    cd meshes/
    triangle -pqa${area[0]} $NAME
    for (( N=1; N<${1:-4}; N++ )); do
        triangle -rpqa${area[$N]} $NAME.$N
    done
    cd ..
fi

# generate .dat.node, .dat.ele files
for (( N=1; N<=${1:-4}; N++ )); do
    ./tri2petsc.py meshes/$NAME.$N $NAME.$N.dat
done

make unfem

# run unfem and show error, evals, time results
for (( N=1; N<=${1:-4}; N++ )); do
    cmd="./unfem -log_view -un_mesh ${NAME}.${N}.dat ${OPTIONS}"
    echo "running:  $cmd"
    rm -f foo.txt
    $cmd &> foo.txt
    'grep' "result for N" foo.txt
    'grep' SNESFunctionEval foo.txt | awk '{print $1,$2}'
    'grep' SNESJacobianEval foo.txt | awk '{print $1,$2}'
    'grep' "Main Stage:" foo.txt | awk '{print $1,$2,$3,$4}'
done
rm -f foo.txt

